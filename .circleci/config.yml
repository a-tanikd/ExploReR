version: 2.1

orbs:
  github-release: h-matsuo/github-release@0.1.3

jobs:

  # Job: run-unit-tests
  #   Execute `gradle test` to run unit tests on the target commit.
  run-unit-tests:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      # ===== Initialize the environment
      - checkout
      - run:
          name: Set up git command
          command: |
            git config push.default current
            git config user.email "ci@circleci.com"
            git config user.name "CircleCI"
      - run:
          name: Merge branch `origin/master`
          command: git merge origin/master -m 'Merge branch `origin/master`'
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          - v1-dependencies-
      - run: ./gradlew dependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
      # ===== Run `gradle test`
      - run: ./gradlew test
      # ===== Collect and upload test results
      - run:
          name: Collect test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
            cp -r build/reports/tests/test/* ~/junit/
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit

  # Job: build-artifacts
  #   Execute `gradle assemble` to generate a jar file on the target commit.
  build-artifacts:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      # ===== Initialize the environment
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          - v1-dependencies-
      - run: ./gradlew dependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
      # ===== Assemble jar file
      - run: ./gradlew assemble
      # ===== Save current version
      - run: ./gradlew -q printCurrentVersion > current-version.txt
      # ===== Collect and persist the built artifacts
      - run:
          name: Collect artifacts to be released
          command: |
            mkdir -p workspace/artifacts
            cp ./build/libs/* ./workspace/artifacts/
            cp current-version.txt ./workspace/
      - persist_to_workspace:
          root: ./workspace
          paths:
            - .

  # Job: publish-as-nightly-build
  #   Publish to the GitHub Releases as a nightly-build release.
  publish-as-nightly-build:
    executor: github-release/default
    environment:
      TZ: "/usr/share/zoneinfo/Asia/Tokyo"
    steps:
      # ===== Initialize the environment
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "81:dc:9e:90:1d:62:9a:19:fa:66:83:6f:6e:67:c3:e3"
      - run:
          name: Set up git command
          command: |
            git config push.default current
            git config user.email "ci@circleci.com"
            git config user.name "CircleCI"
      - attach_workspace:
          at: ./workspace
      # ===== Delete the existing nightly-build release
      - github-release/delete:
          tag: nightly-build
      - run:
          name: Delete existing nightly-build tag
          command: git push origin :nightly-build
      # ===== Rename a jar file
      - run:
          name: Rename jar file
          command: mv ./workspace/artifacts/kGenProg*.jar ./workspace/artifacts/kGenProg-nightly-build.jar
      # ===== Publish a new nightly-build release
      - github-release/create:
          tag: nightly-build
          target: master
          title: "Nightly Build ($(date +'%y/%m/%d %H:%M') JST)"
          description: |
            This is a nightly-build release, automatically built on \`master\` branch (commit SHA: ${CIRCLE_SHA1}).
            Execute the following command to download the latest version:
            \`\`\`
            $ curl -LO https://github.com/kusumotolab/kGenProg/releases/download/nightly-build/kGenProg-nightly-build.jar
            \`\`\`
          file-path: ./workspace/artifacts/
          pre-release: true

  # # Job: generate-change-log
  # #   Generate a change log from GitHub's merged pull requests.
  # generate-change-log:
  #   docker:
  #     - image: circleci/node:10.14
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: ./workspace
  #     - run: touch CHANGELOG.md
  #     - run:
  #         name: Generate a change log when needed
  #         command: ./.circleci/generate-change-log.sh
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - CHANGELOG.md

  # # Job: publish-as-new-release
  # #   Publish to the GitHub Releases as a latest release.
  # publish-as-new-release:
  #   docker:
  #     - image: circleci/golang:1.11
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: ./workspace
  #     - run:
  #         name: Publish a new release when needed
  #         command: ./.circleci/publish-new-release.sh

workflows:
  version: 2

  # Workflow: test-branches
  #   Execute the unit tests on every branch except for master on the GitHub.
  # test-branches:
  #   jobs:
  #     - run-unit-tests:
  #         filters:
  #           branches:
  #             ignore: master

  # Workflow: build-and-release
  #   Execute testing, building and publishing on master branch.
  #   This workflow performs:
  #   - On every push to the master branch:
  #     - Test and build the commit
  #     - Publish the built jar to the GitHub Releases as a nightly-build
  #   - Only when gradle.properties has changed:
  #     - Generate a change log based on the GitHub's merged pull requests
  #     - Publish the built jar to the GitHub Releases as a latest release
  build-and-release:
    jobs:
      - run-unit-tests:
          filters:
            branches:
              only: master
      - build-artifacts:
          filters:
            branches:
              only: master
      - publish-as-nightly-build:
          requires:
            - run-unit-tests
            - build-artifacts
      # - generate-change-log:
      #     requires:
      #       - publish-as-nightly-build
      # - publish-as-new-release:
      #     requires:
      #       - generate-change-log